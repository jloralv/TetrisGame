/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/grid/grid.js":
/*!**************************!*\
  !*** ./src/grid/grid.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GridRectangles: () => (/* binding */ GridRectangles)\n/* harmony export */ });\nclass GridRectangles{\r\n  constructor(xloc, yloc, row, col, dimension){\r\n    this.fill=false;\r\n    this.xloc=xloc;\r\n    this.yloc=yloc;\r\n    this.dimension=dimension;\r\n    this.row=row;\r\n    this.col=col\r\n  \r\n  }\r\n  draw(ctx, color){\r\n    this.fill? ctx.fillStyle=color : ctx.fillStyle=\"white\";\r\n    ctx.fillRect (this.xloc, this.yloc,this.dimension, this.dimension)\r\n    ctx.strokeRect(this.xloc, this.yloc,this.dimension, this.dimension)\r\n  }\r\n  update(ltetramino){\r\n    ltetramino.rectangles.forEach( r => {\r\n      (this.xloc===r.x && this.yloc===r.y)? this.fill=true:this.fill=this.fill;\r\n    })\r\n   \r\n  }\r\n}\n\n//# sourceURL=webpack://finaltetris/./src/grid/grid.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dimension: () => (/* binding */ dimension),\n/* harmony export */   gridCols: () => (/* binding */ gridCols),\n/* harmony export */   gridRows: () => (/* binding */ gridRows),\n/* harmony export */   startinggrid: () => (/* binding */ startinggrid)\n/* harmony export */ });\n/* harmony import */ var _tretaminos_L_tretamino_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tretaminos/L.tretamino.js */ \"./src/tretaminos/L.tretamino.js\");\n/* harmony import */ var _tretaminos_I_tretamino_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tretaminos/I.tretamino.js */ \"./src/tretaminos/I.tretamino.js\");\n/* harmony import */ var _tretaminos_T_tetramino_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tretaminos/T.tetramino.js */ \"./src/tretaminos/T.tetramino.js\");\n/* harmony import */ var _tretaminos_O_tetraminos_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tretaminos/O.tetraminos.js */ \"./src/tretaminos/O.tetraminos.js\");\n/* harmony import */ var _tretaminos_S_tetramino_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tretaminos/S.tetramino.js */ \"./src/tretaminos/S.tetramino.js\");\n/* harmony import */ var _tretaminos_Z_tetramino_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tretaminos/Z.tetramino.js */ \"./src/tretaminos/Z.tetramino.js\");\n/* harmony import */ var _tretaminos_J_tetramino_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tretaminos/J.tetramino.js */ \"./src/tretaminos/J.tetramino.js\");\n/* harmony import */ var _utils_key_handler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/key.handler.js */ \"./src/utils/key.handler.js\");\n/* harmony import */ var _grid_grid_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./grid/grid.js */ \"./src/grid/grid.js\");\n/* harmony import */ var _utils_gridcleaner_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/gridcleaner.js */ \"./src/utils/gridcleaner.js\");\n/* harmony import */ var _utils_pagemanager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/pagemanager.js */ \"./src/utils/pagemanager.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\nconst canvas= document.getElementById(\"canvas\");\r\nconst ctx= canvas.getContext(\"2d\");\r\ncanvas.setAttribute(\"width\", window.innerWidth);\r\ncanvas.setAttribute(\"height\", window.innerHeight);\r\nconst dimension=Math.floor(canvas.height*0.035);\r\nconst startinggrid= {x:700, y:150}\r\nconst startingpoint={x: startinggrid.x + (dimension * 4), y: startinggrid.y - (dimension)}\r\nconst kh=new _utils_key_handler_js__WEBPACK_IMPORTED_MODULE_7__.KeyHandler();\r\nconst gridRows=20;\r\nconst gridCols=11;\r\nlet frame=0;\r\nlet interval;\r\nlet gr=[]\r\nlet filledgr=[];\r\nlet ltetramino;\r\nlet score=0;\r\nlet time=0;\r\nlet timer=0;\r\nlet droppedTetraminos=0;\r\nlet gameOver=false;\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", init(true));\r\n\r\nfunction init(beguining){\r\n  beguining? createGrid(): 0;\r\n  beguining? interval=30: interval=interval;\r\n  \r\n  \r\n  let selection= Math.floor(Math.random()*7)\r\n  switch (selection){\r\n  case 0: ltetramino=new _tretaminos_J_tetramino_js__WEBPACK_IMPORTED_MODULE_6__.Jtetramino(startingpoint,dimension,\"blue\"); break; \r\n  case 1: ltetramino=new _tretaminos_Z_tetramino_js__WEBPACK_IMPORTED_MODULE_5__.Ztetramino(startingpoint,dimension,\"red\") ; break; \r\n  case 2: ltetramino=new _tretaminos_S_tetramino_js__WEBPACK_IMPORTED_MODULE_4__.Stetramino(startingpoint,dimension,\"#66ff33\"); break; \r\n  case 3: ltetramino=new _tretaminos_L_tretamino_js__WEBPACK_IMPORTED_MODULE_0__.Ltetramino(startingpoint,dimension,\"orange\"); break; \r\n  case 4: ltetramino=new _tretaminos_I_tretamino_js__WEBPACK_IMPORTED_MODULE_1__.Itetramino(startingpoint,dimension,\"cyan\"); break; \r\n  case 5: ltetramino=new _tretaminos_T_tetramino_js__WEBPACK_IMPORTED_MODULE_2__.Ttetramino(startingpoint,dimension,\"purple\"); break; \r\n  case 6: ltetramino=new _tretaminos_O_tetraminos_js__WEBPACK_IMPORTED_MODULE_3__.Otetramino(startingpoint,dimension,\"yellow\"); break; \r\n   } \r\n}\r\nfunction createGrid(){\r\n  for(let row=0; row<gridRows; row++){\r\n    for(let col=0; col<gridCols; col++){\r\n      gr.push(new _grid_grid_js__WEBPACK_IMPORTED_MODULE_8__.GridRectangles(startinggrid.x+(col*dimension),startinggrid.y+(row*dimension), row, col, dimension))\r\n    }\r\n  }\r\n}\r\n\r\ngameloop()\r\nfunction gameloop(){\r\n  frame++;\r\n  timer++;\r\n  if (timer > 60) {\r\n    timer=0;\r\n    time ++; \r\n  }\r\n  if (droppedTetraminos>10 && interval>9){\r\n    interval -=5;\r\n    droppedTetraminos=0;\r\n  }\r\n  \r\n \r\n  ctx.clearRect(startinggrid.x, startinggrid.y, startinggrid.x+(gridRows*dimension),startinggrid.y+(gridCols*dimension));\r\n  ctx.fillStyle=\"#330000\"\r\n  ctx.fillRect(0,0,canvas.width, canvas.height );\r\n  gr.forEach(g=> g.draw(ctx, \"#806000\"));\r\n  (0,_utils_pagemanager_js__WEBPACK_IMPORTED_MODULE_10__.pagemanager)(ctx, time, score);\r\n  \r\n  if (ltetramino.falling){\r\n    if (kh.right){\r\n        kh.right=false \r\n        ltetramino.updateTetramino(\"x+\", filledgr);\r\n      }\r\n      if (kh.left){\r\n        kh.left=false \r\n        ltetramino.updateTetramino(\"x-\", filledgr);\r\n      }\r\n      if (kh.down){\r\n        kh.down=false \r\n        ltetramino.updateTetramino(\"y\", filledgr);\r\n      }\r\n      if (kh.up){\r\n        kh.up=false\r\n        ltetramino.rotateTetramino(filledgr);\r\n      }\r\n      if (frame >= interval){\r\n        ltetramino.updateTetramino(\"y\", filledgr);\r\n        frame=0;\r\n      }\r\n    ltetramino.drawTetramino(ctx);\r\n  }\r\n  else if (!ltetramino.falling){\r\n    droppedTetraminos++;\r\n    gr.forEach(g=> g.update(ltetramino));\r\n    (0,_utils_gridcleaner_js__WEBPACK_IMPORTED_MODULE_9__.cleanRows)(gr); \r\n    score += _utils_gridcleaner_js__WEBPACK_IMPORTED_MODULE_9__.rowsCleaned;\r\n    filledgr=[];\r\n    gr.forEach(g=> (g.fill)? filledgr.push(g): filledgr=filledgr);\r\n    filledgr.forEach(fg=> (fg.yloc < startinggrid.y + dimension)? gameOver=true: gameOver=gameOver);\r\n    (!gameOver)? init(false) : endFunction ();\r\n  }\r\n  if (!gameOver && !kh.pause) requestAnimationFrame(gameloop);\r\n}\r\n\r\nfunction endFunction(){\r\n  gr.forEach(g=> g.draw(ctx, \"red\"));\r\n  console.log(\"this is the end\")\r\n}\r\n\r\n\n\n//# sourceURL=webpack://finaltetris/./src/index.js?");

/***/ }),

/***/ "./src/tretaminos/I.tretamino.js":
/*!***************************************!*\
  !*** ./src/tretaminos/I.tretamino.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Itetramino: () => (/* binding */ Itetramino)\n/* harmony export */ });\n/* harmony import */ var _utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collisiondetector.js */ \"./src/utils/collisiondetector.js\");\n\r\n\r\n\r\nclass Itetramino{\r\n  constructor(startingpoint, dimension, color){\r\n    this.startingpoint=startingpoint;\r\n    this.dimension=dimension;\r\n    this.color=color;\r\n    this.position=0;\r\n    this.falling=true;\r\n    this.rectangles=[];\r\n      this.rectangles[0]= {x: this.startingpoint.x, y: this.startingpoint.y};\r\n      this.rectangles[1]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y}; \r\n      this.rectangles[2]= {x: this.startingpoint.x + (this.dimension * 2), y: this.startingpoint.y};\r\n      this.rectangles[3]= {x: this.startingpoint.x + (this.dimension * 3), y: this.startingpoint.y};\r\n    this.rotatedRectangles=[]; \r\n  }\r\n  updateTetramino(dir, filledgr){\r\n    if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling){\r\n      switch(dir){\r\n        case \"x+\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x += this.dimension); \r\n        break;\r\n        case \"x-\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForLXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x -= this.dimension); \r\n        break;\r\n        case \"y\" : this.rectangles.forEach(r=> r.y += this.dimension); \r\n        break;\r\n      } \r\n    }\r\n    else if((0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling) this.falling=false\r\n  }\r\n  rotateTetramino(filledgr){ \r\n    switch(this.position){\r\n      case 0:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x + this.dimension, y: this.rectangles[0].y - this.dimension*2};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y - this.dimension}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x - this.dimension, y: this.rectangles[2].y};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x - this.dimension*2, y: this.rectangles[3].y + this.dimension};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=1;\r\n        }\r\n      break;\r\n      case 1:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x - this.dimension, y: this.rectangles[0].y + this.dimension*2};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y + this.dimension}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x + this.dimension , y: this.rectangles[2].y};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x + this.dimension*2, y: this.rectangles[3].y - this.dimension};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=0;\r\n        }\r\n      break;\r\n    }\r\n  }\r\n  changeRectangles(){\r\n    this.rectangles[0].x = this.rotatedRectangles[0].x;\r\n    this.rectangles[0].y = this.rotatedRectangles[0].y;\r\n    this.rectangles[1].x = this.rotatedRectangles[1].x;\r\n    this.rectangles[1].y = this.rotatedRectangles[1].y;\r\n    this.rectangles[2].x = this.rotatedRectangles[2].x;\r\n    this.rectangles[2].y = this.rotatedRectangles[2].y;\r\n    this.rectangles[3].x = this.rotatedRectangles[3].x;\r\n    this.rectangles[3].y = this.rotatedRectangles[3].y;\r\n  }\r\n  drawTetramino(ctx){\r\n    ctx.fillStyle = this.color; \r\n    this.rectangles.forEach(r=> ctx.fillRect(r.x,r.y,this.dimension, this.dimension))\r\n    this.rectangles.forEach(r=> ctx.strokeRect(r.x,r.y,this.dimension, this.dimension))\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/tretaminos/I.tretamino.js?");

/***/ }),

/***/ "./src/tretaminos/J.tetramino.js":
/*!***************************************!*\
  !*** ./src/tretaminos/J.tetramino.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Jtetramino: () => (/* binding */ Jtetramino)\n/* harmony export */ });\n/* harmony import */ var _utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collisiondetector.js */ \"./src/utils/collisiondetector.js\");\n\r\n\r\nclass Jtetramino{\r\n  constructor(startingpoint, dimension, color){\r\n    this.dimension=dimension;\r\n    this.startingpoint=startingpoint;\r\n    this.color=color;\r\n    this.position=0;\r\n    this.falling=true;\r\n    this.rectangles=[];\r\n      this.rectangles[0]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y};\r\n      this.rectangles[1]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y + this.dimension}; \r\n      this.rectangles[2]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y + (this.dimension *2 )};\r\n      this.rectangles[3]= {x: this.startingpoint.x, y: this.startingpoint.y + (this.dimension * 2)};\r\n    this.rotatedRectangles=[];   \r\n  }\r\n  updateTetramino(dir, filledgr){\r\n    if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling){\r\n      switch(dir){\r\n        case \"x+\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x += this.dimension); \r\n        break;\r\n        case \"x-\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForLXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x -= this.dimension); \r\n        break;\r\n        case \"y\" : this.rectangles.forEach(r=> r.y += this.dimension); \r\n        break;\r\n      } \r\n    }\r\n    else if((0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling) this.falling=false\r\n  }\r\n  rotateTetramino(filledgr){ \r\n    switch(this.position){\r\n      case 0:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x - this.dimension, y: this.rectangles[0].y + this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x + this.dimension , y: this.rectangles[2].y - this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x + (this.dimension * 2), y: this.rectangles[3].y};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=1;\r\n        }\r\n      break;\r\n      case 1:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x + this.dimension, y: this.rectangles[0].y + this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x - this.dimension , y: this.rectangles[2].y - this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y - (this.dimension * 2)};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=2;\r\n        }\r\n      break;\r\n      case 2:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x + this.dimension, y: this.rectangles[0].y - this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x - this.dimension , y: this.rectangles[2].y + this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x - (this.dimension *2), y: this.rectangles[3].y};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=3;\r\n        }\r\n      break;\r\n      case 3:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x - this.dimension, y: this.rectangles[0].y - this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x + this.dimension, y: this.rectangles[2].y + this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y + (this.dimension * 2)};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=0;\r\n        }\r\n      break;\r\n    }\r\n  }\r\n  changeRectangles(){\r\n    this.rectangles[0].x = this.rotatedRectangles[0].x;\r\n    this.rectangles[0].y = this.rotatedRectangles[0].y;\r\n    this.rectangles[1].x = this.rotatedRectangles[1].x;\r\n    this.rectangles[1].y = this.rotatedRectangles[1].y;\r\n    this.rectangles[2].x = this.rotatedRectangles[2].x;\r\n    this.rectangles[2].y = this.rotatedRectangles[2].y;\r\n    this.rectangles[3].x = this.rotatedRectangles[3].x;\r\n    this.rectangles[3].y = this.rotatedRectangles[3].y;\r\n  }\r\n  drawTetramino(ctx){\r\n    ctx.fillStyle = this.color; \r\n    this.rectangles.forEach(r=> ctx.fillRect(r.x,r.y,this.dimension, this.dimension))\r\n    this.rectangles.forEach(r=> ctx.strokeRect(r.x,r.y,this.dimension, this.dimension))\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/tretaminos/J.tetramino.js?");

/***/ }),

/***/ "./src/tretaminos/L.tretamino.js":
/*!***************************************!*\
  !*** ./src/tretaminos/L.tretamino.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ltetramino: () => (/* binding */ Ltetramino)\n/* harmony export */ });\n/* harmony import */ var _utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collisiondetector.js */ \"./src/utils/collisiondetector.js\");\n\r\n\r\nclass Ltetramino{\r\n  constructor(startingpoint, dimension, color){\r\n    this.dimension=dimension;\r\n    this.startingpoint=startingpoint;\r\n    this.color=color;\r\n    this.position=0;\r\n    this.falling=true;\r\n    this.rectangles=[];\r\n      this.rectangles[0]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y};\r\n      this.rectangles[1]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y + this.dimension}; \r\n      this.rectangles[2]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y + (this.dimension * 2)};\r\n      this.rectangles[3]= {x: this.startingpoint.x + (this.dimension * 2), y: this.startingpoint.y + (this.dimension * 2)};\r\n    this.rotatedRectangles=[];     \r\n  }\r\n  updateTetramino(dir, filledgr){\r\n    if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling){\r\n      switch(dir){\r\n        case \"x+\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x += this.dimension); \r\n        break;\r\n        case \"x-\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForLXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x -= this.dimension); \r\n        break;\r\n        case \"y\" : this.rectangles.forEach(r=> r.y += this.dimension); \r\n        break;\r\n      } \r\n    }\r\n    else if((0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling) this.falling=false\r\n  }\r\n  rotateTetramino(filledgr){ \r\n    switch(this.position){\r\n      case 0:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x + this.dimension, y: this.rectangles[0].y + this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x - this.dimension, y: this.rectangles[2].y - this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x - (this.dimension * 2), y: this.rectangles[3].y};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=1;\r\n        }\r\n      break;\r\n      case 1:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x - this.dimension, y: this.rectangles[0].y + this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x + this.dimension , y: this.rectangles[2].y - this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y - (this.dimension * 2)};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=2;\r\n        }\r\n      break;\r\n      case 2:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x - this.dimension, y: this.rectangles[0].y - this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x + this.dimension , y: this.rectangles[2].y + this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x + (this.dimension * 2), y: this.rectangles[3].y};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=3;\r\n        }\r\n      break;\r\n      case 3:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x + this.dimension, y: this.rectangles[0].y - this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x - this.dimension , y: this.rectangles[2].y + this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y + (this.dimension * 2)};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=0;\r\n        }\r\n      break;\r\n    }\r\n  }\r\n  changeRectangles(){\r\n    this.rectangles[0].x = this.rotatedRectangles[0].x;\r\n    this.rectangles[0].y = this.rotatedRectangles[0].y;\r\n    this.rectangles[1].x = this.rotatedRectangles[1].x;\r\n    this.rectangles[1].y = this.rotatedRectangles[1].y;\r\n    this.rectangles[2].x = this.rotatedRectangles[2].x;\r\n    this.rectangles[2].y = this.rotatedRectangles[2].y;\r\n    this.rectangles[3].x = this.rotatedRectangles[3].x;\r\n    this.rectangles[3].y = this.rotatedRectangles[3].y;\r\n  }\r\n  drawTetramino(ctx){\r\n    ctx.fillStyle = this.color; \r\n    this.rectangles.forEach(r=> ctx.fillRect(r.x,r.y,this.dimension, this.dimension))\r\n    this.rectangles.forEach(r=> ctx.strokeRect(r.x,r.y,this.dimension, this.dimension))\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/tretaminos/L.tretamino.js?");

/***/ }),

/***/ "./src/tretaminos/O.tetraminos.js":
/*!****************************************!*\
  !*** ./src/tretaminos/O.tetraminos.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Otetramino: () => (/* binding */ Otetramino)\n/* harmony export */ });\n/* harmony import */ var _utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collisiondetector.js */ \"./src/utils/collisiondetector.js\");\n\r\n\r\nclass Otetramino{\r\n  constructor(startingpoint, dimension, color){\r\n    this.dimension=dimension;\r\n    this.startingpoint=startingpoint;\r\n    this.color=color;\r\n    this.position=0;\r\n    this.falling=true;\r\n    this.rectangles=[];\r\n      this.rectangles[0]= {x: this.startingpoint.x, y: this.startingpoint.y};\r\n      this.rectangles[1]= {x: this.startingpoint.x +this.dimension, y: this.startingpoint.y}; \r\n      this.rectangles[2]= {x: this.startingpoint.x, y: this.startingpoint.y + this.dimension};\r\n      this.rectangles[3]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y + this.dimension};\r\n     \r\n  }\r\n  updateTetramino(dir, filledgr){\r\n    if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling){\r\n      switch(dir){\r\n        case \"x+\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x += this.dimension); \r\n        break;\r\n        case \"x-\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForLXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x -= this.dimension); \r\n        break;\r\n        case \"y\" : this.rectangles.forEach(r=> r.y += this.dimension); \r\n        break;\r\n      } \r\n    }\r\n    else if((0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling) this.falling=false\r\n  }\r\n  rotateTetramino(filledgr){}\r\n  drawTetramino(ctx){\r\n    ctx.fillStyle = this.color; \r\n    this.rectangles.forEach(r=> ctx.fillRect(r.x,r.y,this.dimension, this.dimension))\r\n    this.rectangles.forEach(r=> ctx.strokeRect(r.x,r.y,this.dimension, this.dimension))\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/tretaminos/O.tetraminos.js?");

/***/ }),

/***/ "./src/tretaminos/S.tetramino.js":
/*!***************************************!*\
  !*** ./src/tretaminos/S.tetramino.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stetramino: () => (/* binding */ Stetramino)\n/* harmony export */ });\n/* harmony import */ var _utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collisiondetector.js */ \"./src/utils/collisiondetector.js\");\n\r\n\r\nclass Stetramino{\r\n  constructor(startingpoint, dimension, color){\r\n    this.dimension=dimension;\r\n    this.startingpoint=startingpoint;\r\n    this.color=color;\r\n    this.position=0;\r\n    this.falling=true;\r\n    this.rectangles=[];\r\n      this.rectangles[0]= {x: this.startingpoint.x, y: this.startingpoint.y + this.dimension};\r\n      this.rectangles[1]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y + this.dimension}; \r\n      this.rectangles[2]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y};\r\n      this.rectangles[3]= {x: this.startingpoint.x + (this.dimension * 2), y: this.startingpoint.y};\r\n    this.rotatedRectangles=[];    \r\n  }\r\n  updateTetramino(dir, filledgr){\r\n    if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling){\r\n      switch(dir){\r\n        case \"x+\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x += this.dimension); \r\n        break;\r\n        case \"x-\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForLXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x -= this.dimension); \r\n        break;\r\n        case \"y\" : this.rectangles.forEach(r=> r.y += this.dimension); \r\n        break;\r\n      } \r\n    }\r\n    else if((0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling) this.falling=false\r\n  }\r\n  rotateTetramino(filledgr){ \r\n    switch(this.position){\r\n      case 0:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x + this.dimension, y: this.rectangles[0].y-this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x + this.dimension, y: this.rectangles[2].y + this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x , y: this.rectangles[3].y + (this.dimension*2)};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=1;\r\n        }\r\n      break;\r\n      case 1:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x - this.dimension, y: this.rectangles[0].y + this.dimension};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x, y: this.rectangles[1].y}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x - this.dimension , y: this.rectangles[2].y-this.dimension};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y - (this.dimension*2)};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=0;\r\n        }\r\n      break;\r\n    }\r\n  }\r\n  changeRectangles(){\r\n    this.rectangles[0].x = this.rotatedRectangles[0].x;\r\n    this.rectangles[0].y = this.rotatedRectangles[0].y;\r\n    this.rectangles[1].x = this.rotatedRectangles[1].x;\r\n    this.rectangles[1].y = this.rotatedRectangles[1].y;\r\n    this.rectangles[2].x = this.rotatedRectangles[2].x;\r\n    this.rectangles[2].y = this.rotatedRectangles[2].y;\r\n    this.rectangles[3].x = this.rotatedRectangles[3].x;\r\n    this.rectangles[3].y = this.rotatedRectangles[3].y;\r\n  } \r\n  drawTetramino(ctx){\r\n    ctx.fillStyle = this.color; \r\n    this.rectangles.forEach(r=> ctx.fillRect(r.x,r.y,this.dimension, this.dimension))\r\n    this.rectangles.forEach(r=> ctx.strokeRect(r.x,r.y,this.dimension, this.dimension))\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/tretaminos/S.tetramino.js?");

/***/ }),

/***/ "./src/tretaminos/T.tetramino.js":
/*!***************************************!*\
  !*** ./src/tretaminos/T.tetramino.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ttetramino: () => (/* binding */ Ttetramino)\n/* harmony export */ });\n/* harmony import */ var _utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collisiondetector.js */ \"./src/utils/collisiondetector.js\");\n\r\n\r\nclass Ttetramino{\r\n  constructor(startingpoint, dimension, color){\r\n    this.dimension=dimension;\r\n    this.startingpoint=startingpoint;\r\n    this.color=color;\r\n    this.position=0;\r\n    this.falling=true;\r\n    this.rectangles=[];\r\n      this.rectangles[0]= {x: this.startingpoint.x, y: this.startingpoint.y};\r\n      this.rectangles[1]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y}; \r\n      this.rectangles[2]= {x: this.startingpoint.x + (this.dimension *2), y: this.startingpoint.y};\r\n      this.rectangles[3]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y + this.dimension};\r\n    this.rotatedRectangles=[];\r\n    \r\n  }\r\n  updateTetramino(dir, filledgr){\r\n    if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling){\r\n      switch(dir){\r\n        case \"x+\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x += this.dimension); \r\n        break;\r\n        case \"x-\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForLXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x -= this.dimension); \r\n        break;\r\n        case \"y\" : this.rectangles.forEach(r=> r.y += this.dimension); \r\n        break;\r\n      } \r\n    }\r\n    else if((0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling) this.falling=false\r\n  }\r\n  rotateTetramino(filledgr){ \r\n    switch(this.position){\r\n      case 0:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x + (this.dimension *2), y: this.rectangles[0].y};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x + this.dimension, y: this.rectangles[1].y + this.dimension}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x, y: this.rectangles[2].y + (this.dimension * 2)};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y}\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){ \r\n          this.changeRectangles();\r\n          this.position=1;\r\n        }\r\n      break;\r\n      case 1:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x, y: this.rectangles[0].y + (this.dimension * 2)};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x - this.dimension, y: this.rectangles[1].y + this.dimension}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x - (this.dimension * 2), y: this.rectangles[2].y};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){7\r\n          this.changeRectangles();\r\n          this.position=2;\r\n        }\r\n      break;\r\n      case 2:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x - (this.dimension * 2), y: this.rectangles[0].y};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x - this.dimension, y: this.rectangles[1].y - this.dimension}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x, y: this.rectangles[2].y - (this.dimension * 2)};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=3;\r\n        }\r\n      break;\r\n      case 3:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x, y: this.rectangles[0].y - (this.dimension * 2)};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x + this.dimension, y: this.rectangles[1].y - this.dimension}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x + (this.dimension * 2), y: this.rectangles[2].y};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x, y: this.rectangles[3].y};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=0;\r\n        }\r\n      break;\r\n    }\r\n  }\r\n  changeRectangles(){\r\n    this.rectangles[0].x = this.rotatedRectangles[0].x;\r\n    this.rectangles[0].y = this.rotatedRectangles[0].y;\r\n    this.rectangles[1].x = this.rotatedRectangles[1].x;\r\n    this.rectangles[1].y = this.rotatedRectangles[1].y;\r\n    this.rectangles[2].x = this.rotatedRectangles[2].x;\r\n    this.rectangles[2].y = this.rotatedRectangles[2].y;\r\n    this.rectangles[3].x = this.rotatedRectangles[3].x;\r\n    this.rectangles[3].y = this.rotatedRectangles[3].y;\r\n  }\r\n  drawTetramino(ctx){\r\n    ctx.fillStyle = this.color; \r\n    this.rectangles.forEach(r=> ctx.fillRect(r.x,r.y,this.dimension, this.dimension))\r\n    this.rectangles.forEach(r=> ctx.strokeRect(r.x,r.y,this.dimension, this.dimension))\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/tretaminos/T.tetramino.js?");

/***/ }),

/***/ "./src/tretaminos/Z.tetramino.js":
/*!***************************************!*\
  !*** ./src/tretaminos/Z.tetramino.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Ztetramino: () => (/* binding */ Ztetramino)\n/* harmony export */ });\n/* harmony import */ var _utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collisiondetector.js */ \"./src/utils/collisiondetector.js\");\n\r\n\r\nclass Ztetramino{\r\n  constructor(startingpoint, dimension, color){\r\n    this.dimension=dimension;\r\n    this.startingpoint=startingpoint;\r\n    this.color=color;\r\n    this.position=0;\r\n    this.falling=true;\r\n    this.rectangles=[];\r\n      this.rectangles[0]= {x: this.startingpoint.x, y: this.startingpoint.y};\r\n      this.rectangles[1]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y}; \r\n      this.rectangles[2]= {x: this.startingpoint.x + this.dimension, y: this.startingpoint.y + this.dimension};\r\n      this.rectangles[3]= {x: this.startingpoint.x + (this.dimension * 2), y: this.startingpoint.y + this.dimension};\r\n    this.rotatedRectangles=[];    \r\n  }\r\n  updateTetramino(dir, filledgr){\r\n    if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling){\r\n      switch(dir){\r\n        case \"x+\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x += this.dimension); \r\n        break;\r\n        case \"x-\": \r\n          if (!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForLXCollisions)(filledgr, this.rectangles)) this.rectangles.forEach(r=> r.x -= this.dimension); \r\n        break;\r\n        case \"y\" : this.rectangles.forEach(r=> r.y += this.dimension); \r\n        break;\r\n      } \r\n    }\r\n    else if((0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForYCollisions)(filledgr, this.rectangles) && this.falling) this.falling=false\r\n  }\r\n  rotateTetramino(filledgr){ \r\n    switch(this.position){\r\n      case 0:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x + (this.dimension * 2), y: this.rectangles[0].y};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x + this.dimension, y: this.rectangles[1].y + this.dimension}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x, y: this.rectangles[2].y};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x - this.dimension , y: this.rectangles[3].y + this.dimension};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=1;\r\n        }\r\n      break;\r\n      case 1:\r\n        this.rotatedRectangles[0]= {x: this.rectangles[0].x - (this.dimension * 2), y: this.rectangles[0].y};\r\n        this.rotatedRectangles[1]= {x: this.rectangles[1].x - this.dimension, y: this.rectangles[1].y - this.dimension}; \r\n        this.rotatedRectangles[2]= {x: this.rectangles[2].x , y: this.rectangles[2].y};\r\n        this.rotatedRectangles[3]= {x: this.rectangles[3].x + this.dimension, y: this.rectangles[3].y - this.dimension};\r\n\r\n        if(!(0,_utils_collisiondetector_js__WEBPACK_IMPORTED_MODULE_0__.checkForRotationCollisions) (filledgr, this.rotatedRectangles)){\r\n          this.changeRectangles();\r\n          this.position=0;\r\n        }\r\n      break;\r\n    }\r\n  }\r\n  changeRectangles(){\r\n    this.rectangles[0].x = this.rotatedRectangles[0].x;\r\n    this.rectangles[0].y = this.rotatedRectangles[0].y;\r\n    this.rectangles[1].x = this.rotatedRectangles[1].x;\r\n    this.rectangles[1].y = this.rotatedRectangles[1].y;\r\n    this.rectangles[2].x = this.rotatedRectangles[2].x;\r\n    this.rectangles[2].y = this.rotatedRectangles[2].y;\r\n    this.rectangles[3].x = this.rotatedRectangles[3].x;\r\n    this.rectangles[3].y = this.rotatedRectangles[3].y;\r\n  }\r\n  drawTetramino(ctx){\r\n    ctx.fillStyle = this.color; \r\n    this.rectangles.forEach(r=> ctx.fillRect(r.x,r.y,this.dimension, this.dimension))\r\n    this.rectangles.forEach(r=> ctx.strokeRect(r.x,r.y,this.dimension, this.dimension))\r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/tretaminos/Z.tetramino.js?");

/***/ }),

/***/ "./src/utils/collisiondetector.js":
/*!****************************************!*\
  !*** ./src/utils/collisiondetector.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkForLXCollisions: () => (/* binding */ checkForLXCollisions),\n/* harmony export */   checkForRXCollisions: () => (/* binding */ checkForRXCollisions),\n/* harmony export */   checkForRotationCollisions: () => (/* binding */ checkForRotationCollisions),\n/* harmony export */   checkForYCollisions: () => (/* binding */ checkForYCollisions)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index.js */ \"./src/index.js\");\n\r\n\r\n\r\nconst checkForLXCollisions= (filledgr, rectangles) => {\r\n  let horizontalcolision=false;    \r\n  rectangles.forEach(r=> {\r\n    (r.x-_index_js__WEBPACK_IMPORTED_MODULE_0__.dimension < _index_js__WEBPACK_IMPORTED_MODULE_0__.startinggrid.x)? horizontalcolision=true: horizontalcolision=horizontalcolision;\r\n    filledgr.forEach(f=>{\r\n      ((r.x - _index_js__WEBPACK_IMPORTED_MODULE_0__.dimension===f.xloc)&&(r.y===f.yloc))? horizontalcolision=true:horizontalcolision=horizontalcolision})\r\n  })\r\n\r\n  return horizontalcolision\r\n}\r\nconst checkForRXCollisions= (filledgr,rectangles)=> {\r\n  let horizontalcolision=false;    \r\n  rectangles.forEach(r=> {\r\n    (r.x+ _index_js__WEBPACK_IMPORTED_MODULE_0__.dimension > _index_js__WEBPACK_IMPORTED_MODULE_0__.startinggrid.x + (_index_js__WEBPACK_IMPORTED_MODULE_0__.dimension * (_index_js__WEBPACK_IMPORTED_MODULE_0__.gridCols-1)))? horizontalcolision=true: horizontalcolision=horizontalcolision;\r\n    filledgr.forEach(f=>{\r\n      ((r.x + _index_js__WEBPACK_IMPORTED_MODULE_0__.dimension===f.xloc)&&(r.y===f.yloc))? horizontalcolision=true:horizontalcolision=horizontalcolision})\r\n  })\r\n\r\n  return horizontalcolision\r\n}\r\nconst checkForYCollisions= (filledgr, rectangles)=>{\r\n  let verticalcolision=false; \r\n  rectangles.forEach(r=> {\r\n    (r.y+ _index_js__WEBPACK_IMPORTED_MODULE_0__.dimension > _index_js__WEBPACK_IMPORTED_MODULE_0__.startinggrid.y + (_index_js__WEBPACK_IMPORTED_MODULE_0__.dimension * (_index_js__WEBPACK_IMPORTED_MODULE_0__.gridRows-1)))? \r\n      verticalcolision=true:verticalcolision=verticalcolision;\r\n    filledgr.forEach(f=>{\r\n      ((r.x ===f.xloc)&&(r.y+ _index_js__WEBPACK_IMPORTED_MODULE_0__.dimension===f.yloc))? verticalcolision=true:verticalcolision=verticalcolision})\r\n  })\r\n  return verticalcolision\r\n}\r\nconst checkForRotationCollisions= (filledgr, rectangles)=>{\r\n  let rotationcolision=false;\r\n  rectangles.forEach(r=>{\r\n    (r.x > _index_js__WEBPACK_IMPORTED_MODULE_0__.startinggrid.x + (_index_js__WEBPACK_IMPORTED_MODULE_0__.dimension*10) || r.x <_index_js__WEBPACK_IMPORTED_MODULE_0__.startinggrid.x ||\r\n    r.y>(_index_js__WEBPACK_IMPORTED_MODULE_0__.dimension*19) ) ? rotationcolision=true : rotationcolision=rotationcolision;\r\n    filledgr.forEach(f=>{\r\n      ((r.x ===f.xloc)&&(r.y===f.yloc))? rotationcolision=true:rotationcolision=rotationcolision\r\n    })\r\n  });\r\n  \r\n  return rotationcolision\r\n}\n\n//# sourceURL=webpack://finaltetris/./src/utils/collisiondetector.js?");

/***/ }),

/***/ "./src/utils/gridcleaner.js":
/*!**********************************!*\
  !*** ./src/utils/gridcleaner.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cleanRows: () => (/* binding */ cleanRows),\n/* harmony export */   rowsCleaned: () => (/* binding */ rowsCleaned)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../index.js */ \"./src/index.js\");\n\r\n\r\nlet rowsCleaned;\r\nconst cleanRows= (gr)=>{\r\n  rowsCleaned=0;\r\n  for (let rows=19; rows>-1; rows--){\r\n    let rowsArray=[];\r\n    rowsArray = gr.filter((f)=> f.row===rows && f.fill)\r\n    if(rowsArray.length ===11){\r\n      rowsCleaned++;\r\n      gr.forEach((g)=> {\r\n        if (g.row===rows){\r\n          g.fill=false;\r\n          g.row=-1;\r\n          g.yloc= _index_js__WEBPACK_IMPORTED_MODULE_0__.startinggrid.y-_index_js__WEBPACK_IMPORTED_MODULE_0__.dimension;\r\n        }\r\n      })\r\n      gr.forEach((g) => {\r\n        if (g.row < rows){\r\n          g.row ++;\r\n          g.yloc=g.yloc + _index_js__WEBPACK_IMPORTED_MODULE_0__.dimension;\r\n        }\r\n      })\r\n      rows ++;\r\n    }\r\n  }    \r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/utils/gridcleaner.js?");

/***/ }),

/***/ "./src/utils/key.handler.js":
/*!**********************************!*\
  !*** ./src/utils/key.handler.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyHandler: () => (/* binding */ KeyHandler)\n/* harmony export */ });\nclass KeyHandler{\r\n  constructor(){\r\n    this.up=false;\r\n    this.down=false;\r\n    this.right=false;\r\n    this.left=false;\r\n    this.start=false;\r\n    this.pause=false;\r\n   \r\n    window.addEventListener(\"keydown\", (e)=>{\r\n      let key= e.key\r\n      switch(key){\r\n        case \"ArrowRight\": this.right=true; break;\r\n        case \"ArrowLeft\": this.left=true; break;\r\n        case \"ArrowUp\": this.up=true; break;\r\n        case \"ArrowDown\": this.down=true; break;\r\n        case \"p\": !this.pause? this.pause=true  : this.pause= false; break;\r\n        case \"Enter\": !this.start? this.start=true : this.start=false; break;\r\n      }\r\n    })\r\n    window.addEventListener(\"keyup\", (e)=>{\r\n      let key= e.key\r\n  \r\n      switch(key){\r\n        case \"ArrowRight\": this.right=false; break;\r\n        case \"ArrowLeft\": this.left=false; break;\r\n        case \"ArrowUp\": this.up=false; break;\r\n        case \"ArrowDown\": this.down=false; break;\r\n\r\n      }\r\n    }) \r\n  }\r\n}\r\n\n\n//# sourceURL=webpack://finaltetris/./src/utils/key.handler.js?");

/***/ }),

/***/ "./src/utils/pagemanager.js":
/*!**********************************!*\
  !*** ./src/utils/pagemanager.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pagemanager: () => (/* binding */ pagemanager)\n/* harmony export */ });\nconst pagemanager= (ctx, time, score)=>{\r\n \r\n  ctx.fillStyle=\"white\";\r\n  ctx.font = \"bold 184px Arial\";\r\n  ctx.fillText(\"Tetrix\", 80, 300);\r\n  ctx.font = \"bold 44px Arial\";\r\n  ctx.fillText(\"Press Enter to Start\", 100, 600);\r\n  ctx.fillText(\"Press 'p' to pause\", 100, 700);\r\n  ctx.fillText(\"Top Ten Players:\", 1300, 200)\r\n\r\n  ctx.fillStyle=\"white\";\r\n  ctx.font = \"bold 24px Arial\";\r\n  ctx.fillText(`Time: ${time} `, 700, 100 )\r\n  ctx.fillText(`Score: ${score}`, 700, 130)\r\n\r\n  let players=[\r\n    {name: \"Jo\", score: \"100\"},  {name: \"Jo\", score: \"100\"},{name: \"Jo\", score: \"100\"},{name: \"Jo\", score: \"100\"},{name: \"Jo\", score: \"100\"},{name: \"Jo\", score: \"100\"},{name: \"Jo\", score: \"100\"},{name: \"Jo\", score: \"100\"},{name: \"Jo\", score: \"100\"},{name: \"Jo\", score: \"100\"},\r\n\r\n  ];\r\n  for (let i=0; i<10; i++){\r\n    ctx.fillText(`${i+1}: ${players[i].name}... ${players[i].score}`, 1300, 300 +(i*50) )\r\n  }\r\n}\n\n//# sourceURL=webpack://finaltetris/./src/utils/pagemanager.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;